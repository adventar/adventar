// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user.sql

package adventar_db

import (
	"context"
)

const createUser = `-- name: CreateUser :execlastid
INSERT INTO users (name, auth_uid, auth_provider, icon_url)
values (?, ?, ?, ?)
`

type CreateUserParams struct {
	Name         string
	AuthUid      string
	AuthProvider string
	IconUrl      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser,
		arg.Name,
		arg.AuthUid,
		arg.AuthProvider,
		arg.IconUrl,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getUserByAuthInfo = `-- name: GetUserByAuthInfo :one
SELECT id, name, auth_uid, auth_provider, icon_url, created_at, updated_at FROM users WHERE auth_provider = ? and auth_uid = ?
`

type GetUserByAuthInfoParams struct {
	AuthProvider string
	AuthUid      string
}

func (q *Queries) GetUserByAuthInfo(ctx context.Context, arg GetUserByAuthInfoParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAuthInfo, arg.AuthProvider, arg.AuthUid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AuthUid,
		&i.AuthProvider,
		&i.IconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, auth_uid, auth_provider, icon_url, created_at, updated_at FROM users WHERE id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AuthUid,
		&i.AuthProvider,
		&i.IconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserIconUrl = `-- name: UpdateUserIconUrl :exec
UPDATE users SET icon_url = ? WHERE id = ?
`

type UpdateUserIconUrlParams struct {
	IconUrl string
	ID      int64
}

func (q *Queries) UpdateUserIconUrl(ctx context.Context, arg UpdateUserIconUrlParams) error {
	_, err := q.db.ExecContext(ctx, updateUserIconUrl, arg.IconUrl, arg.ID)
	return err
}

const updateUserName = `-- name: UpdateUserName :exec
UPDATE users SET name = ?  WHERE id = ?
`

type UpdateUserNameParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) error {
	_, err := q.db.ExecContext(ctx, updateUserName, arg.Name, arg.ID)
	return err
}
