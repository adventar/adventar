// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: calendar.sql

package adventar_db

import (
	"context"
)

const createCalendar = `-- name: CreateCalendar :execlastid
INSERT INTO calendars
  (title, description, year, user_id)
VALUES
  (?, ?, ?, ?)
`

type CreateCalendarParams struct {
	Title       string
	Description string
	Year        int32
	UserID      int64
}

func (q *Queries) CreateCalendar(ctx context.Context, arg CreateCalendarParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createCalendar,
		arg.Title,
		arg.Description,
		arg.Year,
		arg.UserID,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getCalendarWithUserById = `-- name: GetCalendarWithUserById :one
SELECT
  calendars.id,
  calendars.title,
  calendars.description,
  calendars.year,
  users.id as user_id,
  users.name as user_name,
  users.icon_url as user_icon_url
FROM
  calendars
INNER JOIN
  users ON calendars.user_id = users.id
WHERE
  calendars.id = ?
LIMIT 1
`

type GetCalendarWithUserByIdRow struct {
	ID          int64
	Title       string
	Description string
	Year        int32
	UserID      int64
	UserName    string
	UserIconUrl string
}

func (q *Queries) GetCalendarWithUserById(ctx context.Context, id int64) (GetCalendarWithUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getCalendarWithUserById, id)
	var i GetCalendarWithUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Year,
		&i.UserID,
		&i.UserName,
		&i.UserIconUrl,
	)
	return i, err
}

const listCalendarsByYear = `-- name: ListCalendarsByYear :many
SELECT id, user_id, title, description, year, listable, created_at, updated_at FROM calendars WHERE year = ?
`

func (q *Queries) ListCalendarsByYear(ctx context.Context, year int32) ([]Calendar, error) {
	rows, err := q.db.QueryContext(ctx, listCalendarsByYear, year)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Calendar
	for rows.Next() {
		var i Calendar
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.Year,
			&i.Listable,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
