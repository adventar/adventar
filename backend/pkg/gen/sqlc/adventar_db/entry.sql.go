// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: entry.sql

package adventar_db

import (
	"context"
)

const listEntriesByCalendarId = `-- name: ListEntriesByCalendarId :many
SELECT
  entries.id,
  entries.day,
  entries.title,
  entries.comment,
  entries.url,
  entries.image_url,
  users.id as user_id,
  users.name as user_name,
  users.icon_url as user_icon_url
FROM
  entries
INNER JOIN
  users ON entries.user_id = users.id
WHERE
  entries.calendar_id = ?
ORDER BY
  entries.day
`

type ListEntriesByCalendarIdRow struct {
	ID          int64
	Day         int32
	Title       string
	Comment     string
	Url         string
	ImageUrl    string
	UserID      int64
	UserName    string
	UserIconUrl string
}

func (q *Queries) ListEntriesByCalendarId(ctx context.Context, calendarID int64) ([]ListEntriesByCalendarIdRow, error) {
	rows, err := q.db.QueryContext(ctx, listEntriesByCalendarId, calendarID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListEntriesByCalendarIdRow
	for rows.Next() {
		var i ListEntriesByCalendarIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Day,
			&i.Title,
			&i.Comment,
			&i.Url,
			&i.ImageUrl,
			&i.UserID,
			&i.UserName,
			&i.UserIconUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
