// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: calendar.sql

package adventar_db

import (
	"context"
)

const getCalendarById = `-- name: GetCalendarById :one
SELECT id, user_id, title, description, year, listable, created_at, updated_at FROM calendars WHERE id = ? LIMIT 1
`

func (q *Queries) GetCalendarById(ctx context.Context, id int64) (Calendar, error) {
	row := q.db.QueryRowContext(ctx, getCalendarById, id)
	var i Calendar
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Year,
		&i.Listable,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCalendarsByYear = `-- name: ListCalendarsByYear :many
SELECT id, user_id, title, description, year, listable, created_at, updated_at FROM calendars WHERE year = ?
`

func (q *Queries) ListCalendarsByYear(ctx context.Context, year int32) ([]Calendar, error) {
	rows, err := q.db.QueryContext(ctx, listCalendarsByYear, year)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Calendar
	for rows.Next() {
		var i Calendar
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.Year,
			&i.Listable,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
