// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: adventar/v1/adventar.proto

package adventarv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/adventar/adventar/backend/pkg/gen/adventar/v1"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AdventarName is the fully-qualified name of the Adventar service.
	AdventarName = "adventar.v1.Adventar"
)

// AdventarClient is a client for the adventar.v1.Adventar service.
type AdventarClient interface {
	ListCalendars(context.Context, *connect_go.Request[v1.ListCalendarsRequest]) (*connect_go.Response[v1.ListCalendarsResponse], error)
	GetCalendar(context.Context, *connect_go.Request[v1.GetCalendarRequest]) (*connect_go.Response[v1.GetCalendarResponse], error)
	CreateCalendar(context.Context, *connect_go.Request[v1.CreateCalendarRequest]) (*connect_go.Response[v1.Calendar], error)
	UpdateCalendar(context.Context, *connect_go.Request[v1.UpdateCalendarRequest]) (*connect_go.Response[v1.Calendar], error)
	DeleteCalendar(context.Context, *connect_go.Request[v1.DeleteCalendarRequest]) (*connect_go.Response[emptypb.Empty], error)
	ListCalendarStats(context.Context, *connect_go.Request[v1.ListCalendarStatsRequest]) (*connect_go.Response[v1.ListCalendarStatsResponse], error)
	ListEntries(context.Context, *connect_go.Request[v1.ListEntriesRequest]) (*connect_go.Response[v1.ListEntriesResponse], error)
	CreateEntry(context.Context, *connect_go.Request[v1.CreateEntryRequest]) (*connect_go.Response[v1.Entry], error)
	UpdateEntry(context.Context, *connect_go.Request[v1.UpdateEntryRequest]) (*connect_go.Response[v1.Entry], error)
	DeleteEntry(context.Context, *connect_go.Request[v1.DeleteEntryRequest]) (*connect_go.Response[emptypb.Empty], error)
	SignIn(context.Context, *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v1.User], error)
	GetUser(context.Context, *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.User], error)
	UpdateUser(context.Context, *connect_go.Request[v1.UpdateUserRequest]) (*connect_go.Response[v1.User], error)
	HealthCheck(context.Context, *connect_go.Request[v1.HealthCheckRequest]) (*connect_go.Response[v1.HealthCheckResponse], error)
}

// NewAdventarClient constructs a client for the adventar.v1.Adventar service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdventarClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AdventarClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adventarClient{
		listCalendars: connect_go.NewClient[v1.ListCalendarsRequest, v1.ListCalendarsResponse](
			httpClient,
			baseURL+"/adventar.v1.Adventar/ListCalendars",
			opts...,
		),
		getCalendar: connect_go.NewClient[v1.GetCalendarRequest, v1.GetCalendarResponse](
			httpClient,
			baseURL+"/adventar.v1.Adventar/GetCalendar",
			opts...,
		),
		createCalendar: connect_go.NewClient[v1.CreateCalendarRequest, v1.Calendar](
			httpClient,
			baseURL+"/adventar.v1.Adventar/CreateCalendar",
			opts...,
		),
		updateCalendar: connect_go.NewClient[v1.UpdateCalendarRequest, v1.Calendar](
			httpClient,
			baseURL+"/adventar.v1.Adventar/UpdateCalendar",
			opts...,
		),
		deleteCalendar: connect_go.NewClient[v1.DeleteCalendarRequest, emptypb.Empty](
			httpClient,
			baseURL+"/adventar.v1.Adventar/DeleteCalendar",
			opts...,
		),
		listCalendarStats: connect_go.NewClient[v1.ListCalendarStatsRequest, v1.ListCalendarStatsResponse](
			httpClient,
			baseURL+"/adventar.v1.Adventar/ListCalendarStats",
			opts...,
		),
		listEntries: connect_go.NewClient[v1.ListEntriesRequest, v1.ListEntriesResponse](
			httpClient,
			baseURL+"/adventar.v1.Adventar/ListEntries",
			opts...,
		),
		createEntry: connect_go.NewClient[v1.CreateEntryRequest, v1.Entry](
			httpClient,
			baseURL+"/adventar.v1.Adventar/CreateEntry",
			opts...,
		),
		updateEntry: connect_go.NewClient[v1.UpdateEntryRequest, v1.Entry](
			httpClient,
			baseURL+"/adventar.v1.Adventar/UpdateEntry",
			opts...,
		),
		deleteEntry: connect_go.NewClient[v1.DeleteEntryRequest, emptypb.Empty](
			httpClient,
			baseURL+"/adventar.v1.Adventar/DeleteEntry",
			opts...,
		),
		signIn: connect_go.NewClient[v1.SignInRequest, v1.User](
			httpClient,
			baseURL+"/adventar.v1.Adventar/SignIn",
			opts...,
		),
		getUser: connect_go.NewClient[v1.GetUserRequest, v1.User](
			httpClient,
			baseURL+"/adventar.v1.Adventar/GetUser",
			opts...,
		),
		updateUser: connect_go.NewClient[v1.UpdateUserRequest, v1.User](
			httpClient,
			baseURL+"/adventar.v1.Adventar/UpdateUser",
			opts...,
		),
		healthCheck: connect_go.NewClient[v1.HealthCheckRequest, v1.HealthCheckResponse](
			httpClient,
			baseURL+"/adventar.v1.Adventar/HealthCheck",
			opts...,
		),
	}
}

// adventarClient implements AdventarClient.
type adventarClient struct {
	listCalendars     *connect_go.Client[v1.ListCalendarsRequest, v1.ListCalendarsResponse]
	getCalendar       *connect_go.Client[v1.GetCalendarRequest, v1.GetCalendarResponse]
	createCalendar    *connect_go.Client[v1.CreateCalendarRequest, v1.Calendar]
	updateCalendar    *connect_go.Client[v1.UpdateCalendarRequest, v1.Calendar]
	deleteCalendar    *connect_go.Client[v1.DeleteCalendarRequest, emptypb.Empty]
	listCalendarStats *connect_go.Client[v1.ListCalendarStatsRequest, v1.ListCalendarStatsResponse]
	listEntries       *connect_go.Client[v1.ListEntriesRequest, v1.ListEntriesResponse]
	createEntry       *connect_go.Client[v1.CreateEntryRequest, v1.Entry]
	updateEntry       *connect_go.Client[v1.UpdateEntryRequest, v1.Entry]
	deleteEntry       *connect_go.Client[v1.DeleteEntryRequest, emptypb.Empty]
	signIn            *connect_go.Client[v1.SignInRequest, v1.User]
	getUser           *connect_go.Client[v1.GetUserRequest, v1.User]
	updateUser        *connect_go.Client[v1.UpdateUserRequest, v1.User]
	healthCheck       *connect_go.Client[v1.HealthCheckRequest, v1.HealthCheckResponse]
}

// ListCalendars calls adventar.v1.Adventar.ListCalendars.
func (c *adventarClient) ListCalendars(ctx context.Context, req *connect_go.Request[v1.ListCalendarsRequest]) (*connect_go.Response[v1.ListCalendarsResponse], error) {
	return c.listCalendars.CallUnary(ctx, req)
}

// GetCalendar calls adventar.v1.Adventar.GetCalendar.
func (c *adventarClient) GetCalendar(ctx context.Context, req *connect_go.Request[v1.GetCalendarRequest]) (*connect_go.Response[v1.GetCalendarResponse], error) {
	return c.getCalendar.CallUnary(ctx, req)
}

// CreateCalendar calls adventar.v1.Adventar.CreateCalendar.
func (c *adventarClient) CreateCalendar(ctx context.Context, req *connect_go.Request[v1.CreateCalendarRequest]) (*connect_go.Response[v1.Calendar], error) {
	return c.createCalendar.CallUnary(ctx, req)
}

// UpdateCalendar calls adventar.v1.Adventar.UpdateCalendar.
func (c *adventarClient) UpdateCalendar(ctx context.Context, req *connect_go.Request[v1.UpdateCalendarRequest]) (*connect_go.Response[v1.Calendar], error) {
	return c.updateCalendar.CallUnary(ctx, req)
}

// DeleteCalendar calls adventar.v1.Adventar.DeleteCalendar.
func (c *adventarClient) DeleteCalendar(ctx context.Context, req *connect_go.Request[v1.DeleteCalendarRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteCalendar.CallUnary(ctx, req)
}

// ListCalendarStats calls adventar.v1.Adventar.ListCalendarStats.
func (c *adventarClient) ListCalendarStats(ctx context.Context, req *connect_go.Request[v1.ListCalendarStatsRequest]) (*connect_go.Response[v1.ListCalendarStatsResponse], error) {
	return c.listCalendarStats.CallUnary(ctx, req)
}

// ListEntries calls adventar.v1.Adventar.ListEntries.
func (c *adventarClient) ListEntries(ctx context.Context, req *connect_go.Request[v1.ListEntriesRequest]) (*connect_go.Response[v1.ListEntriesResponse], error) {
	return c.listEntries.CallUnary(ctx, req)
}

// CreateEntry calls adventar.v1.Adventar.CreateEntry.
func (c *adventarClient) CreateEntry(ctx context.Context, req *connect_go.Request[v1.CreateEntryRequest]) (*connect_go.Response[v1.Entry], error) {
	return c.createEntry.CallUnary(ctx, req)
}

// UpdateEntry calls adventar.v1.Adventar.UpdateEntry.
func (c *adventarClient) UpdateEntry(ctx context.Context, req *connect_go.Request[v1.UpdateEntryRequest]) (*connect_go.Response[v1.Entry], error) {
	return c.updateEntry.CallUnary(ctx, req)
}

// DeleteEntry calls adventar.v1.Adventar.DeleteEntry.
func (c *adventarClient) DeleteEntry(ctx context.Context, req *connect_go.Request[v1.DeleteEntryRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteEntry.CallUnary(ctx, req)
}

// SignIn calls adventar.v1.Adventar.SignIn.
func (c *adventarClient) SignIn(ctx context.Context, req *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v1.User], error) {
	return c.signIn.CallUnary(ctx, req)
}

// GetUser calls adventar.v1.Adventar.GetUser.
func (c *adventarClient) GetUser(ctx context.Context, req *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.User], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UpdateUser calls adventar.v1.Adventar.UpdateUser.
func (c *adventarClient) UpdateUser(ctx context.Context, req *connect_go.Request[v1.UpdateUserRequest]) (*connect_go.Response[v1.User], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// HealthCheck calls adventar.v1.Adventar.HealthCheck.
func (c *adventarClient) HealthCheck(ctx context.Context, req *connect_go.Request[v1.HealthCheckRequest]) (*connect_go.Response[v1.HealthCheckResponse], error) {
	return c.healthCheck.CallUnary(ctx, req)
}

// AdventarHandler is an implementation of the adventar.v1.Adventar service.
type AdventarHandler interface {
	ListCalendars(context.Context, *connect_go.Request[v1.ListCalendarsRequest]) (*connect_go.Response[v1.ListCalendarsResponse], error)
	GetCalendar(context.Context, *connect_go.Request[v1.GetCalendarRequest]) (*connect_go.Response[v1.GetCalendarResponse], error)
	CreateCalendar(context.Context, *connect_go.Request[v1.CreateCalendarRequest]) (*connect_go.Response[v1.Calendar], error)
	UpdateCalendar(context.Context, *connect_go.Request[v1.UpdateCalendarRequest]) (*connect_go.Response[v1.Calendar], error)
	DeleteCalendar(context.Context, *connect_go.Request[v1.DeleteCalendarRequest]) (*connect_go.Response[emptypb.Empty], error)
	ListCalendarStats(context.Context, *connect_go.Request[v1.ListCalendarStatsRequest]) (*connect_go.Response[v1.ListCalendarStatsResponse], error)
	ListEntries(context.Context, *connect_go.Request[v1.ListEntriesRequest]) (*connect_go.Response[v1.ListEntriesResponse], error)
	CreateEntry(context.Context, *connect_go.Request[v1.CreateEntryRequest]) (*connect_go.Response[v1.Entry], error)
	UpdateEntry(context.Context, *connect_go.Request[v1.UpdateEntryRequest]) (*connect_go.Response[v1.Entry], error)
	DeleteEntry(context.Context, *connect_go.Request[v1.DeleteEntryRequest]) (*connect_go.Response[emptypb.Empty], error)
	SignIn(context.Context, *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v1.User], error)
	GetUser(context.Context, *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.User], error)
	UpdateUser(context.Context, *connect_go.Request[v1.UpdateUserRequest]) (*connect_go.Response[v1.User], error)
	HealthCheck(context.Context, *connect_go.Request[v1.HealthCheckRequest]) (*connect_go.Response[v1.HealthCheckResponse], error)
}

// NewAdventarHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdventarHandler(svc AdventarHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/adventar.v1.Adventar/ListCalendars", connect_go.NewUnaryHandler(
		"/adventar.v1.Adventar/ListCalendars",
		svc.ListCalendars,
		opts...,
	))
	mux.Handle("/adventar.v1.Adventar/GetCalendar", connect_go.NewUnaryHandler(
		"/adventar.v1.Adventar/GetCalendar",
		svc.GetCalendar,
		opts...,
	))
	mux.Handle("/adventar.v1.Adventar/CreateCalendar", connect_go.NewUnaryHandler(
		"/adventar.v1.Adventar/CreateCalendar",
		svc.CreateCalendar,
		opts...,
	))
	mux.Handle("/adventar.v1.Adventar/UpdateCalendar", connect_go.NewUnaryHandler(
		"/adventar.v1.Adventar/UpdateCalendar",
		svc.UpdateCalendar,
		opts...,
	))
	mux.Handle("/adventar.v1.Adventar/DeleteCalendar", connect_go.NewUnaryHandler(
		"/adventar.v1.Adventar/DeleteCalendar",
		svc.DeleteCalendar,
		opts...,
	))
	mux.Handle("/adventar.v1.Adventar/ListCalendarStats", connect_go.NewUnaryHandler(
		"/adventar.v1.Adventar/ListCalendarStats",
		svc.ListCalendarStats,
		opts...,
	))
	mux.Handle("/adventar.v1.Adventar/ListEntries", connect_go.NewUnaryHandler(
		"/adventar.v1.Adventar/ListEntries",
		svc.ListEntries,
		opts...,
	))
	mux.Handle("/adventar.v1.Adventar/CreateEntry", connect_go.NewUnaryHandler(
		"/adventar.v1.Adventar/CreateEntry",
		svc.CreateEntry,
		opts...,
	))
	mux.Handle("/adventar.v1.Adventar/UpdateEntry", connect_go.NewUnaryHandler(
		"/adventar.v1.Adventar/UpdateEntry",
		svc.UpdateEntry,
		opts...,
	))
	mux.Handle("/adventar.v1.Adventar/DeleteEntry", connect_go.NewUnaryHandler(
		"/adventar.v1.Adventar/DeleteEntry",
		svc.DeleteEntry,
		opts...,
	))
	mux.Handle("/adventar.v1.Adventar/SignIn", connect_go.NewUnaryHandler(
		"/adventar.v1.Adventar/SignIn",
		svc.SignIn,
		opts...,
	))
	mux.Handle("/adventar.v1.Adventar/GetUser", connect_go.NewUnaryHandler(
		"/adventar.v1.Adventar/GetUser",
		svc.GetUser,
		opts...,
	))
	mux.Handle("/adventar.v1.Adventar/UpdateUser", connect_go.NewUnaryHandler(
		"/adventar.v1.Adventar/UpdateUser",
		svc.UpdateUser,
		opts...,
	))
	mux.Handle("/adventar.v1.Adventar/HealthCheck", connect_go.NewUnaryHandler(
		"/adventar.v1.Adventar/HealthCheck",
		svc.HealthCheck,
		opts...,
	))
	return "/adventar.v1.Adventar/", mux
}

// UnimplementedAdventarHandler returns CodeUnimplemented from all methods.
type UnimplementedAdventarHandler struct{}

func (UnimplementedAdventarHandler) ListCalendars(context.Context, *connect_go.Request[v1.ListCalendarsRequest]) (*connect_go.Response[v1.ListCalendarsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("adventar.v1.Adventar.ListCalendars is not implemented"))
}

func (UnimplementedAdventarHandler) GetCalendar(context.Context, *connect_go.Request[v1.GetCalendarRequest]) (*connect_go.Response[v1.GetCalendarResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("adventar.v1.Adventar.GetCalendar is not implemented"))
}

func (UnimplementedAdventarHandler) CreateCalendar(context.Context, *connect_go.Request[v1.CreateCalendarRequest]) (*connect_go.Response[v1.Calendar], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("adventar.v1.Adventar.CreateCalendar is not implemented"))
}

func (UnimplementedAdventarHandler) UpdateCalendar(context.Context, *connect_go.Request[v1.UpdateCalendarRequest]) (*connect_go.Response[v1.Calendar], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("adventar.v1.Adventar.UpdateCalendar is not implemented"))
}

func (UnimplementedAdventarHandler) DeleteCalendar(context.Context, *connect_go.Request[v1.DeleteCalendarRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("adventar.v1.Adventar.DeleteCalendar is not implemented"))
}

func (UnimplementedAdventarHandler) ListCalendarStats(context.Context, *connect_go.Request[v1.ListCalendarStatsRequest]) (*connect_go.Response[v1.ListCalendarStatsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("adventar.v1.Adventar.ListCalendarStats is not implemented"))
}

func (UnimplementedAdventarHandler) ListEntries(context.Context, *connect_go.Request[v1.ListEntriesRequest]) (*connect_go.Response[v1.ListEntriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("adventar.v1.Adventar.ListEntries is not implemented"))
}

func (UnimplementedAdventarHandler) CreateEntry(context.Context, *connect_go.Request[v1.CreateEntryRequest]) (*connect_go.Response[v1.Entry], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("adventar.v1.Adventar.CreateEntry is not implemented"))
}

func (UnimplementedAdventarHandler) UpdateEntry(context.Context, *connect_go.Request[v1.UpdateEntryRequest]) (*connect_go.Response[v1.Entry], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("adventar.v1.Adventar.UpdateEntry is not implemented"))
}

func (UnimplementedAdventarHandler) DeleteEntry(context.Context, *connect_go.Request[v1.DeleteEntryRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("adventar.v1.Adventar.DeleteEntry is not implemented"))
}

func (UnimplementedAdventarHandler) SignIn(context.Context, *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v1.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("adventar.v1.Adventar.SignIn is not implemented"))
}

func (UnimplementedAdventarHandler) GetUser(context.Context, *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("adventar.v1.Adventar.GetUser is not implemented"))
}

func (UnimplementedAdventarHandler) UpdateUser(context.Context, *connect_go.Request[v1.UpdateUserRequest]) (*connect_go.Response[v1.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("adventar.v1.Adventar.UpdateUser is not implemented"))
}

func (UnimplementedAdventarHandler) HealthCheck(context.Context, *connect_go.Request[v1.HealthCheckRequest]) (*connect_go.Response[v1.HealthCheckResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("adventar.v1.Adventar.HealthCheck is not implemented"))
}
